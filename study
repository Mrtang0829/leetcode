#include<iostream>
#include<algorithm>
#include<queue>
#include <unordered_set>
#include <unordered_map>
#include <cstring>
using namespace std;

struct TreeNode {
    char val;
    TreeNode *l, *r, *parent;
    int l_tag, r_tag;
    explicit TreeNode (char v) : val(v), l_tag(0), r_tag(0), l(nullptr), r(nullptr), parent(nullptr) {}
};

// 前序线索二叉树
void preThread (TreeNode *root, TreeNode *&pre) {
    if (root == nullptr) return ;
    if (root->l == nullptr) {
        root->l = pre; root->l_tag = 1;
    }
    if (pre != nullptr && pre->r == nullptr) {
        pre->r = root; pre->r_tag = 1;
    }
    pre = root;
    if (!root->l_tag) preThread(root->l, pre);
    if (!root->r_tag) preThread(root->r, pre);
}

// 中序线索二叉树
void inThread (TreeNode *root, TreeNode *&pre) {
    if (root == nullptr) return ;
    inThread(root->l, pre);
    if (root->l == nullptr) {
        root->l = pre; root->l_tag = 1;
    }
    if (pre != nullptr && pre->r == nullptr) {
        pre->r = root; pre->r_tag = 1;
    }
    pre = root;
    inThread(root->r, pre);
}

// 后序线索二叉树
void postThread (TreeNode *root, TreeNode *&pre) {
    if (root == nullptr) return ;
    postThread(root->l, pre);
    postThread(root->r, pre);
    if (root->l == nullptr) {
        root->l = pre; root->l_tag = 1;
    }
    if (pre != nullptr && pre->r == nullptr) {
        pre->r = root; pre->r_tag = 1;
    }
    pre = root;
}

// 前序线索遍历
void preThread_Traversal (TreeNode *root) {
    while (root != nullptr) {
        cout << root->val << ' ';
        if (root->l != nullptr && !root->l_tag) root = root->l; // 左子树
        else root = root->r; // 后继节点
    }
}

TreeNode* in_first(TreeNode *root) {
    while (!root->l_tag) root = root->l;
    return root;
}

TreeNode* in_next(TreeNode *root) {
    if (root->r != nullptr && !root->r_tag) { // 存在右子树
        TreeNode *node = root->r;
        while (node->l != nullptr && !node->l_tag) node = node->l;
        return node;
    }
    else return root->r; // 后继
}

// 中序线索遍历
void inThread_Traversal (TreeNode *root) {
    for (TreeNode *node = in_first(root); node != nullptr; node = in_next(node)) {
        cout << node->val << ' ';
    }
}

TreeNode* post_first (TreeNode *root) {
    while (!root->l_tag) root = root->l;
    if (!root->r_tag) return post_first(root->r);
    return root;
}

TreeNode* post_next (TreeNode* root) {
    if (root->r_tag) return root->r;
    if (root->parent == nullptr) return nullptr;
    else if (root->parent->r == root) {
        return root->parent;
    }
    else {
        if (root->parent->r != nullptr && root->parent->r_tag == 0) {
            return post_first(root->parent->r);
        }
        else return root->parent;
    }
}
// 后序线索遍历, 注 : 后序遍历需要添加parent节点,即改变TreeNode结构
void postThread_Traversal(TreeNode *root) {
    for (TreeNode *node = post_first(root); node != nullptr; node = post_next(node)) {
        cout << node->val << ' ';
    }
}


void init (TreeNode *root) {
    auto *node1 = new TreeNode(3);
    root->l = node1;
    node1->parent = root;
    auto *node2 = new TreeNode(2);
    node1->l = node2;
    node2->parent = node1;
    auto *node3 = new TreeNode(4);
    node1->r = node3;
    node3->parent = node1;

    auto *node4 = new TreeNode(7);
    root->r = node4;
    node4->parent = root;
    auto *node5 = new TreeNode(6);
    node4->l = node5;
    node5->parent = node4;
    auto *node6 = new TreeNode(8);
    node4->r = node6;
    node6->parent = node4;
}

// 根左右创建树
void create_tree(TreeNode** root, int* idx, char *data, TreeNode* parent) {
    char c = data[(*idx)++];
    if (c == '#') {
        *root = nullptr;
    }
    else {
        *root = (TreeNode*) malloc(sizeof (TreeNode));
        (*root)->val = c;
        (*root)->l_tag = 0; (*root)->r_tag = 0;
        (*root)->l = (*root)->r = nullptr;
        (*root)->parent = parent;
        create_tree(&((*root)->l), idx, data, *root);
        create_tree(&((*root)->r), idx, data, *root);
    }
}

// 验证线索情况
void inorder(TreeNode *root) {
    if (root == nullptr) return ;
    if (!root->l_tag) inorder(root->l);
    cout << root->l_tag << ' ' << root->val << ' ' << root->r_tag << endl;
    if (root->l_tag && root->l != nullptr) {
        cout << "l : " << root->l->val << ' ';
    }
    if (root->r_tag && root->r != nullptr) {
        cout << "r : " << root->r->val << ' ';
    }
    cout << endl;
    if (!root->r_tag) inorder(root->r);
}

int main() {
    TreeNode *root = nullptr;
    TreeNode *pre = nullptr;
    int idx = 0;
    char data[20] = {};
    scanf("%s", data);

    cout << data << endl;
    create_tree(&root, &idx, data, nullptr);

    postThread(root, pre);
    postThread_Traversal(root);
    return 0;
}
