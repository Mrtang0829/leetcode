由leetcode-1349切入
见到这种题型常见思路 ： 将 (i, j) 映射到 v（v = i * m + j）上，对每一个v有 0，1两种选择，对其进行二进制存储,之后记忆化搜索（dp）
显然：当 m * n 较小时，例如 m * n = 20 时，状态数2^20，可行，但 m * n 数量适中时，例 m * n = 64,这种做法就不可行了

行状压：相比如上述的整体状压，我们只状压行（每一行），之后，之后递推每一行：

class Solution {
public:
    // 每一行假设 '.' 都坐人，枚举子集，判断子集在当前行是否合法，找到与上一行合法的最大值
    // 复杂度 ： 8 * 4^m
    int maxStudents(vector<vector<char>>& g) {
        int n = g.size(), m = g[0].size();
        vector<vector<int>> f(n + 1, vector<int>((1 << m) + 1, 0));
        for (int i = 1; i <= n; i++) {
            int v = 0;
            for (int j = m - 1; j >= 0; j--) {
                v += g[i - 1][j] == '.' ? 1 << j : 0;
            }
            int xv = 0;
            for (int s = v; s; s = (s - 1) & v) {
                
                if (s & (s >> 1)) continue;
                int maxv = 0;
                for (int j = 0; j < 1 << m; j++) {
                    if (!((s << 1) & j) && !((s >> 1) & j)) {
                        maxv = max(maxv, f[i - 1][j]);
                    }
                }
                f[i][s] = maxv + count(s);
            }
            for (int j = 0; j < 1 << m; j++) {
                xv = max(xv, f[i - 1][j]);
            }
            // 记录下当前行不选位置的情况
            f[i][0] = xv;
        }
        int res = 0;
        for (int i = 0; i < 1 << m; i++) res = max(res, f[n][i]);
        return res;
    }

    int count(int x) {
        int res = 0;
        while (x) {
            res++;
            x = x & (x - 1);
        }
        return res;
    }
};
